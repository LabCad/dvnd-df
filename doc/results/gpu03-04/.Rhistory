drawGraph(value_rvnd_n1w1in3, value_dvnd_n2w1in3, c("red", "blue"))
drawGraph(value_rvnd_n1w1in4, value_dvnd_n2w1in4, c("red", "blue"))
drawGraph(value_rvnd_n1w1in5, value_dvnd_n2w1in5, c("red", "blue"))
drawGraph(value_rvnd_n1w1in6, value_dvnd_n2w1in6, c("red", "blue"))
drawGraph(value_rvnd_n1w1in7, value_dvnd_n2w1in7, c("red", "blue"))
for (i in 1:8) {
drawGraph(value_rvnd_n1w1[i], value_dvnd_n2w1[i], c("red", "blue"))
}
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
for (i in 1:8) {
drawGraph(value_rvnd_n1w1[i], value_dvnd_n2w1[i], c("red", "blue"))
}
for (i in 1:8) {
drawGraph(unlist(value_rvnd_n1w1[i]), unlist(value_dvnd_n2w1[i]), c("red", "blue"))
}
boxplot(c(time_rvnd_in7, time_dvnd_in7), names=c(plot_labels_n1, plot_labels), col=c(red_color[1:4], white_color), main="Time in7")
for (i in 1:8) {
drawGraph(unlist(value_rvnd_n1w1[i]), unlist(value_dvnd_n2w1[i]), c("red", "blue"))
}
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND n2w1", names=c("0", "1", "2", "3", "4", "5", "6", "7"))
abline(h = 1, col = "red")
value_dvnd_rvnd_n2w1=list(compareVectors(value_dvnd_n1w1in0, value_rvnd_n1w1in0), compareVectors(value_dvnd_n1w1in1, value_rvnd_n1w1in1), compareVectors(value_dvnd_n1w1in2, value_rvnd_n1w1in2), compareVectors(value_dvnd_n1w1in3, value_rvnd_n1w1in3), compareVectors(value_dvnd_n1w1in4, value_rvnd_n1w1in4), compareVectors(value_dvnd_n1w1in5, value_rvnd_n1w1in5), compareVectors(value_dvnd_n1w1in6, value_rvnd_n1w1in6), compareVectors(value_dvnd_n1w1in7, value_rvnd_n1w1in7))
boxplot(value_dvnd_rvnd_n2w1, main="Value DVND/RVND n2w1", names=c("0", "1", "2", "3", "4", "5", "6", "7"))
abline(h = 1, col = "red")
compareVectors <- function(vec1, vec2){
return(sort(sort(vec1) / sort(vec2)))
}
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND n2w1", names=c("0", "1", "2", "3", "4", "5", "6", "7"))
abline(h = 1, col = "red")
value_dvnd_rvnd_n2w1=list(compareVectors(value_dvnd_n1w1in0, value_rvnd_n1w1in0), compareVectors(value_dvnd_n1w1in1, value_rvnd_n1w1in1), compareVectors(value_dvnd_n1w1in2, value_rvnd_n1w1in2), compareVectors(value_dvnd_n1w1in3, value_rvnd_n1w1in3), compareVectors(value_dvnd_n1w1in4, value_rvnd_n1w1in4), compareVectors(value_dvnd_n1w1in5, value_rvnd_n1w1in5), compareVectors(value_dvnd_n1w1in6, value_rvnd_n1w1in6), compareVectors(value_dvnd_n1w1in7, value_rvnd_n1w1in7))
boxplot(value_dvnd_rvnd_n2w1, main="Value DVND/RVND n2w1", names=c("0", "1", "2", "3", "4", "5", "6", "7"))
abline(h = 1, col = "red")
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
hist(unlist(value_dvnd_rvnd_n2w1[1]))
hist(unlist(value_dvnd_rvnd_n2w1[1]), col="red")
hist(unlist(value_dvnd_rvnd_n2w1[1]), unlist(value_dvnd_rvnd_n2w1[1]))
hist(value_dvnd_rvnd_n2w1)
a = hist(unlist(value_dvnd_rvnd_n2w1[1]))
b = hist(unlist(value_dvnd_rvnd_n2w1[2]))
plot(a, col="red")
plot(b, col="blue")
plot(a, col=rgb(0,0,1,1/4), xlim=c(0,10))  # first histogram
plot(b, col=rgb(1,0,0,1/4), xlim=c(0,10), add=T)  # second
plot(a, col=rgb(0,0,1,1/4))  # first histogram
plot(b, col=rgb(1,0,0,1/4), add=T)  # second
hist1 = hist(unlist(value_dvnd_rvnd_n2w1[1]))
hist2 = hist(unlist(value_dvnd_rvnd_n2w1[2]))
hist3 = hist(unlist(value_dvnd_rvnd_n2w1[3]))
hist4 = hist(unlist(value_dvnd_rvnd_n2w1[4]))
hist5 = hist(unlist(value_dvnd_rvnd_n2w1[5]))
hist6 = hist(unlist(value_dvnd_rvnd_n2w1[6]))
hist7 = hist(unlist(value_dvnd_rvnd_n2w1[7]))
hist8 = hist(unlist(value_dvnd_rvnd_n2w1[8]))
plot(hist1, col=rainbow(8)[1])
plot(hist2, col=rainbow(8)[2], add=T)
plot(hist3, col=rainbow(8)[3], add=T)
plot(hist4, col=rainbow(8)[4], add=T)
plot(hist5, col=rainbow(8)[5], add=T)
plot(hist6, col=rainbow(8)[6], add=T)
plot(hist7, col=rainbow(8)[7], add=T)
plot(hist8, col=rainbow(8)[8], add=T)
plot(hist1, col=rainbow(8)[1])
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T), pch=16
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1])
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=alpha(rainbow(8)[1], 0.5))
plot(hist2, col=alpha(rainbow(8)[2], 0.5), add=T, pch=16)
plot(hist3, col=alpha(rainbow(8)[3], 0.5), add=T, pch=16)
plot(hist4, col=alpha(rainbow(8)[4], 0.5), add=T, pch=16)
plot(hist5, col=alpha(rainbow(8)[5], 0.5), add=T, pch=16)
plot(hist6, col=alpha(rainbow(8)[6], 0.5), add=T, pch=16)
plot(hist7, col=alpha(rainbow(8)[7], 0.5), add=T, pch=16)
plot(hist8, col=alpha(rainbow(8)[8], 0.5), add=T, pch=16)
plot(hist1, col=rainbow(8)[1])
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=(0, 2))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0, 2))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0.7, 1.2))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0.85, 1.1))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0.885, 1.05))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0.885, 1.15))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0.885, 1.09))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND n2w1", names=0:7, xlab="# Instance")
abline(h = 1, col = "red")
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND n2w1", names=0:7)
abline(h = 1, col = "red")
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND n2w1", names=0:7, xlab="# Instance")
abline(h = 1, col = "red")
boxplot(value_dvnd_rvnd_n2w1, main="Value DVND/RVND n2w1", names=0:7, xlab="# Instance")
abline(h = 1, col = "red")
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
boxplot(time_dvnd_rvnd_n2w1, main="", names=0:7, xlab="# Instance", ylab="Time DVND/RVND")
abline(h = 1, col = "red")
value_dvnd_rvnd_n2w1=list(compareVectors(value_dvnd_n1w1in0, value_rvnd_n1w1in0), compareVectors(value_dvnd_n1w1in1, value_rvnd_n1w1in1), compareVectors(value_dvnd_n1w1in2, value_rvnd_n1w1in2), compareVectors(value_dvnd_n1w1in3, value_rvnd_n1w1in3), compareVectors(value_dvnd_n1w1in4, value_rvnd_n1w1in4), compareVectors(value_dvnd_n1w1in5, value_rvnd_n1w1in5), compareVectors(value_dvnd_n1w1in6, value_rvnd_n1w1in6), compareVectors(value_dvnd_n1w1in7, value_rvnd_n1w1in7))
boxplot(value_dvnd_rvnd_n2w1, main="", names=0:7, xlab="# Instance", ylab="Value DVND/RVND")
abline(h = 1, col = "red")
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND", names=0:7, xlab="# Instance", ylab="Time DVND/RVND")
abline(h = 1, col = "red")
value_dvnd_rvnd_n2w1=list(compareVectors(value_dvnd_n1w1in0, value_rvnd_n1w1in0), compareVectors(value_dvnd_n1w1in1, value_rvnd_n1w1in1), compareVectors(value_dvnd_n1w1in2, value_rvnd_n1w1in2), compareVectors(value_dvnd_n1w1in3, value_rvnd_n1w1in3), compareVectors(value_dvnd_n1w1in4, value_rvnd_n1w1in4), compareVectors(value_dvnd_n1w1in5, value_rvnd_n1w1in5), compareVectors(value_dvnd_n1w1in6, value_rvnd_n1w1in6), compareVectors(value_dvnd_n1w1in7, value_rvnd_n1w1in7))
boxplot(value_dvnd_rvnd_n2w1, main="Value DVND/RVND", names=0:7, xlab="# Instance", ylab="Value DVND/RVND")
abline(h = 1, col = "red")
for (i in 1:8) {
drawGraph(unlist(value_rvnd_n1w1[i]), unlist(value_dvnd_n2w1[i]), c("red", "blue"), "Sample", "Solution Value")
}
drawGraph <- function(seqvec1, seqvec2, colors, xlabel, ylabel){
if (missing(xlabel)) {
xlabel = ""
}
if (missing(ylabel)) {
ylabel = ""
}
plot(1:100, sort(seqvec1), type="o", col=colors[1], xlab = xlabel, ylab = ylabel, main = "", ylim=c(min(seqvec1, seqvec2), max(seqvec1, seqvec2)))
lines(1:100, sort(seqvec2), type = "o", col = colors[2])
legend("bottomright", inset=.02, c("RVND", "DVND"), fill=colors, horiz=TRUE, cex=0.8)
}
for (i in 1:8) {
drawGraph(unlist(value_rvnd_n1w1[i]), unlist(value_dvnd_n2w1[i]), c("red", "blue"), "Sample", "Solution Value")
}
for (i in 1:8) {
drawGraph(unlist(value_rvnd_n1w1[i]), unlist(value_dvnd_n2w1[i]), c("red", "blue"), "Sample", "Solution value")
}
legend("bottomright", inset=.02, c("RVND", "DVND"), fill=colors, horiz=TRUE, cex=0.8)
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
mean(time_rvnd_in0)
time_rvnd_in0
time_rvnd_in0[0]
unlist(time_rvnd_in0[0])
mean(time_rvnd_n1w1in0)
mean(time_rvnd_n1w2in0)
View(time_dvnd_in2)
dev.cur()
dev.off()
dev.cur()
getOption("device")
housing <- data.frame(
State = rep("AK", 6),
region = rep("West", 6),
Date = c(2010.25, 2010.50, 2009.75, 2010, 2008, 2008.25),
#   start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
Home.Value = c(224952, 225511, 225820, 224994, 234590, 233714),
Structure.Cost = c(160599, 160252, 163791, 161787, 155400, 157458),
stringsAsFactors = FALSE
)
# Print the data frame.
library(ggplot2)
ggplot(housing, aes(x = Home.Value)) +
geom_histogram()
print(housing)
hist(housing$Home.Value)
plot(Home.Value ~ Date,
data=subset(housing, State == "MA"))
points(Home.Value ~ Date, col="red",
data=subset(housing, State == "TX"))
legend(1975, 400000,
c("MA", "TX"), title="State",
col=c("black", "red"),
pch=c(1, 1))
View(housing)
hp2001Q1 <- subset(housing, Date == 2001.25)
ggplot(hp2001Q1,
aes(y = Structure.Cost, x = Land.Value)) +
geom_point()
ggplot(hp2001Q1,
aes(y = Structure.Cost, x = log(Land.Value))) +
geom_point()
# The iris dataset is proposed by R
head(iris)
# basic scatterplot
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point()
print(iris)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) #+ geom_point()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
source('~/git/dvnd-df/doc/results/gpu03-04/gpu03.r', echo=TRUE)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) #+ geom_point()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
View(n4w10dvnd)
View(n4w10dvnd)
ggplot(n3w1dvnd, aes(x=in0count, y=in0initial)) + geom_point()
len(n3w10dvnd$in2initial)
length(n3w10dvnd$in2initial)
ggplot(n3w1dvnd, aes(x=1:length(in0initial), y=in0initial)) + geom_point()
ggplot(n3w1dvnd, aes(x=1:length(in0initial), y=in0final)) + geom_point()
ggplot(n3w1dvnd, aes(x=1:length(in0initial), y=sorted(in0final)) + geom_point()
ggplot(n3w1dvnd, aes(x=1:length(in0initial), y=sorted(in0final))) + geom_point()
ggplot(n3w1dvnd, aes(x=1:length(in0initial), y=sort(in0final))) + geom_point()
# The mtcars dataset is proposed in R
head(mtcars)
# Color and shape depend on factor (categorical variable)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species, shape=Species)) +
geom_point(size=6, alpha=0.6)
# Color and shape depend on factor (categorical variable)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Petal.Length, size=Petal.Length)) +
geom_point(alpha=0.6)
ateste = mtcars
View(ateste)
print(mtcars)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species, shape=Species)) +
geom_point(size=6, alpha=0.6)
ggplot(iris, aes(color=Species, shape=Species)) +
geom_point(size=6, alpha=0.6)
ggplot(iris, aes(x=a, y=b, color=Species, shape=Species)) +
geom_point(size=6, alpha=0.6)
iris
library(latticeExtra)
# create data
set.seed(1)
x = 1:100
var1 = cumsum(rnorm(100))
var2 = var1^2
data=data.frame(x,var1,var2)
## 1=== With xyplot, you can easily show both var in the same time :
xyplot(var1 + var2 ~ x, data, type = "l")
## 2=== But it could be nice to have TWO Y axis!
# --> construct separate plots for each series
obj1 <- xyplot(var1 ~ x, data, type = "l" , lwd=2)
obj2 <- xyplot(var2 ~ x, data, type = "l", lwd=2)
# --> Make the plot with second y axis:
doubleYScale(obj1, obj2, add.ylab2 = TRUE)
## 3=== Same graph with a key legend
doubleYScale(obj1, obj2, text = c("obj1", "obj2") , add.ylab2 = TRUE)
install.packages("latticeExtra")
install.packages("latticeExtra")
library(latticeExtra)
# create data
set.seed(1)
x = 1:100
var1 = cumsum(rnorm(100))
var2 = var1^2
data=data.frame(x,var1,var2)
## 1=== With xyplot, you can easily show both var in the same time :
xyplot(var1 + var2 ~ x, data, type = "l")
## 2=== But it could be nice to have TWO Y axis!
# --> construct separate plots for each series
obj1 <- xyplot(var1 ~ x, data, type = "l" , lwd=2)
obj2 <- xyplot(var2 ~ x, data, type = "l", lwd=2)
# --> Make the plot with second y axis:
doubleYScale(obj1, obj2, add.ylab2 = TRUE)
## 3=== Same graph with a key legend
doubleYScale(obj1, obj2, text = c("obj1", "obj2") , add.ylab2 = TRUE)
obj1 <- xyplot(var1 ~ x, data, type = "l" , lwd=2)
obj2 <- xyplot(var2 ~ x, data, type = "l", lwd=2)
doubleYScale(obj1, obj2, add.ylab2 = TRUE)
doubleYScale(obj1, obj2, text = c("obj1", "obj2") , add.ylab2 = TRUE)
doubleYScale(n4w1dvnd$in0final, n4w2dvnd$in0final, add.ylab2 = TRUE)
obj1 <- xyplot(n4w1dvnd$in0time ~ x, data, type = "l" , lwd=2)
obj2 <- xyplot(n4w2dvnd$in0time ~ x, data, type = "l", lwd=2)
doubleYScale(obj1, obj2, add.ylab2 = TRUE)
obj1 <- xyplot(sort(n4w1dvnd$in0time) ~ x, data, type = "l" , lwd=2)
obj2 <- xyplot(sort(n4w2dvnd$in0time) ~ x, data, type = "l", lwd=2)
doubleYScale(obj1, obj2, add.ylab2 = TRUE)
doubleYScale(n4w1dvnd$in0final, n4w2dvnd$in0final, add.ylab2 = TRUE)
doubleYScale(obj1, obj2, text = c("obj1", "obj2") , add.ylab2 = TRUE)
obj3 <- xyplot(n4w3dvnd$in0time ~ x, data, type = "l", lwd=2)
doubleYScale(obj1, obj2, obj3, add.ylab2 = TRUE)
# For the weatherAUS dataset.
library(rattle)
# To generate a density plot.
library(ggplot2)
cities <- c("Canberra", "Darwin", "Melbourne", "Sydney")
ds <- subset(weatherAUS, Location %in% cities & ! is.na(Temp3pm))
p  <- ggplot(ds, aes(Temp3pm, colour=Location, fill=Location))
p  <- p + geom_density(alpha=0.55)
p
install.packages("rattle")
library(rattle)
# To generate a density plot.
library(ggplot2)
cities <- c("Canberra", "Darwin", "Melbourne", "Sydney")
ds <- subset(weatherAUS, Location %in% cities & ! is.na(Temp3pm))
p  <- ggplot(ds, aes(Temp3pm, colour=Location, fill=Location))
p  <- p + geom_density(alpha=0.55)
p
# Let's use the diamonds dataset
data(diamonds)
head(diamonds)
# plot 1: Density of price for each type of cut of the diamond:
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5)
# plot 2: Density plot with transparency (using the alpha argument):
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5 , alpha=0.2)
# plot 3: Stacked density plot:
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5, position="fill")
# plot 4
ggplot(diamonds, aes(x=depth, y=..density..)) +
geom_density(aes(fill=cut), position="stack") +
xlim(50,75) +
theme(legend.position="none")
# plot 1: Density of price for each type of cut of the diamond:
> ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
+     geom_density(adjust=1.5)
>
> # plot 2: Density plot with transparency (using the alpha argument):
> ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
+     geom_density(adjust=1.5 , alpha=0.2)
>
> # plot 3: Stacked density plot:
> ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
+     geom_density(adjust=1.5, position="fill")
>
> # plot 4
> ggplot(diamonds, aes(x=depth, y=..density..)) +
+     geom_density(aes(fill=cut), position="stack") +
+     xlim(50,75) +
+     theme(legend.position="none")
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5)
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5 , alpha=0.2)
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5, position="fill")
ggplot(diamonds, aes(x=depth, y=..density..)) +
geom_density(aes(fill=cut), position="stack") +
xlim(50,75) +
theme(legend.position="none")
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_violin(aes(fill = cyl))
ggplot(mtcars, aes(factor(cyl), mpg)) + geom_violin(aes(fill = cyl))
print(mtcars)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
View(noIndMov)
View(noIndMov)
head(mtcars)
# First type of color
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_violin(aes(fill = cyl))
# Second type
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_violin(aes(fill = factor(cyl)))
a = mtcars
View(a)
View(a)
ggplot(noIndMov, aes(factor(n), final)) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov, aes(factor(n), time) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov, aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov, aes(factor(n), time)) + geom_boxplot(aes(fill = factor(n)))
ggplot(noIndMov, aes(n, time)) + geom_boxplot(aes(fill = n))
ggplot(noIndMov, aes(factor(n), time)) + geom_boxplot(aes(fill = factor(n)))
ggplot(noIndMov, aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov, aes(factor(n), imp)) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov, aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov, aes(factor(n), time())) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov, aes(factor(n), time) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov, aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov[in==0], aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov[noIndMov$in==0], aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(noIndMov[noIndMov$in.==0], aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
noIndMov[noIndMov$in.==0]
noIndMov[noIndMov$n==0]
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
View(compNoIndMov)
View(compNoIndMov)
noIndMov[noIndMov$inum==0]
noIndMov[compNoIndMov$inum==0]
compNoIndMov[compNoIndMov$inum==0]
compNoIndMov
compNoIndMov[compNoIndMov$inum == 0]
compNoIndMov[compNoIndMov$inum == 1]
compNoIndMov[compNoIndMov$n == 1]
compNoIndMov[compNoIndMov$type == "rvnd"]
compNoIndMov
compNoIndMov[]
compNoIndMov[compNoIndMov$n == 1]
subset(compNoIndMov, n==1)
subset(compNoIndMov, inum==1)
ggplot(subset(compNoIndMov, inum==0), aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(subset(compNoIndMov, inum==7), aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
subset(compNoIndMov, inum==1 && w=1)
subset(compNoIndMov, inum==1 && w==1)
subset(compNoIndMov, w==1)
subset(compNoIndMov, inum==1 and w==1)
subset(compNoIndMov, inum==1 && w==1)
subset(subset(compNoIndMov, w==1), inum==1)
ggplot(subset(subset(compNoIndMov, w==1), inum==1), aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(subset(compNoIndMov, inum==1), aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(subset(compNoIndMov, inum==0), aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(type, n)), time)) + geom_violin(aes(fill = factor(paste(type, n)))))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(type, n)), time)) + geom_violin(aes(fill = factor(paste(type, n))))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep=""))))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep=""))))
ggplot(subset(compNoIndMov, inum==0), aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(subset(compNoIndMov, inum==0), aes(factor(n), time))
ggplot(subset(compNoIndMov, inum==0), aes(factor(n), time)) + geom_violin(aes(fill = factor(n)))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep=""))))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(substr(type, 1, 2), n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep=""))))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(substr(type, 1, 1), n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep=""))))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(substr(type, 1, 1), n, sep="")), time)) + geom_violin(aes(fill = factor(paste(substr(type, 1, 1), n, sep=""))))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep=""))))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep="")))) + guides(fill=guide_legend(title="New Legend Title"))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep="")))) + guides(fill=guide_legend(title="type"))
ggplot(subset(compNoIndMov, inum==0), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep="")))) + guides(fill=guide_legend(title=NULL))
ggplot(subset(compNoIndMov, inum==1), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep="")))) + guides(fill=guide_legend(title=NULL))
ggplot(subset(compNoIndMov, inum==7), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep="")))) + guides(fill=guide_legend(title=NULL))
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
for (input_num in 0:7) {
ggplot(subset(compNoIndMov, inum==input_num), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep="")))) + guides(fill=guide_legend(title=NULL))
}
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
install.packages("svglite")
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
for (input_num in 0:7) {
ggplot(subset(compNoIndMov, inum==input_num), aes(factor(paste(type, n, sep="")), time)) + geom_violin(aes(fill = factor(paste(type, n, sep="")))) + guides(fill=guide_legend(title=NULL))
}
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
paste("oi", "ola")
paste("oi", "ola", "texto")
paste("oi", "ola", "texto", sep = "")
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/gplot.r', echo=TRUE)
