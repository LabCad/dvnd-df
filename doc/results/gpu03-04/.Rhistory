unlist(value_dvnd_rvnd_n2w1[5]), unlist(value_dvnd_rvnd_n2w1[6]), unlist(value_dvnd_rvnd_n2w1[7]), unlist(value_dvnd_rvnd_n2w1[8]))
plot(1:100, sort(unlist(value_dvnd_rvnd_n2w1[1])), type="o", col=rainbow(8)[1],
xlab = "", ylab = "", main = "",
ylim=c(min(value_dvnd_rvnd_n2w1_all), max(value_dvnd_rvnd_n2w1_all)))
for (i in 2:8) {
lines(1:100, sort(unlist(value_dvnd_rvnd_n2w1[i])), type = "o", col = rainbow(8)[i])
}
abline(h = 1, col = "black")
plot(1:100, sort(value_dvnd_rvnd_n2w1))
drawGraph(value_dvnd_n2w1in0, value_rvnd_n1w1in0, c("red", "blue"))
drawGraph(value_dvnd_n2w1in1, value_rvnd_n1w1in1, c("red", "blue"))
drawGraph(value_dvnd_n2w1in2, value_rvnd_n1w1in2, c("red", "blue"))
drawGraph(value_dvnd_n2w1in3, value_rvnd_n1w1in3, c("red", "blue"))
drawGraph(value_dvnd_n2w1in4, value_rvnd_n1w1in4, c("red", "blue"))
drawGraph(value_dvnd_n2w1in5, value_rvnd_n1w1in5, c("red", "blue"))
drawGraph(value_dvnd_n2w1in6, value_rvnd_n1w1in6, c("red", "blue"))
drawGraph(value_dvnd_n2w1in7, value_rvnd_n1w1in7, c("red", "blue"))
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
drawGraph <- function(seqvec1, seqvec2, colors){
plot(1:100, sort(seqvec1), type="o", col=colors[1], xlab = "", ylab = "", main = "", ylim=c(min(seqvec1, seqvec2), max(seqvec1, seqvec2)))
lines(1:100, sort(seqvec2), type = "o", col = colors[2])
legend("bottomright", inset=.02, c("RVND", "DVND"), fill=colors, horiz=TRUE, cex=0.8)
}
drawGraph(value_dvnd_n2w1in0, value_rvnd_n1w1in0, c("red", "blue"))
drawGraph(value_dvnd_n2w1in1, value_rvnd_n1w1in1, c("red", "blue"))
drawGraph(value_dvnd_n2w1in2, value_rvnd_n1w1in2, c("red", "blue"))
drawGraph(value_dvnd_n2w1in3, value_rvnd_n1w1in3, c("red", "blue"))
drawGraph(value_dvnd_n2w1in4, value_rvnd_n1w1in4, c("red", "blue"))
drawGraph(value_dvnd_n2w1in5, value_rvnd_n1w1in5, c("red", "blue"))
drawGraph(value_dvnd_n2w1in6, value_rvnd_n1w1in6, c("red", "blue"))
drawGraph(value_dvnd_n2w1in7, value_rvnd_n1w1in7, c("red", "blue"))
drawGraph(value_rvnd_n2w1in0, value_dvnd_n1w1in0, c("red", "blue"))
drawGraph(value_rvnd_n2w1in1, value_dvnd_n1w1in1, c("red", "blue"))
drawGraph(value_rvnd_n2w1in2, value_dvnd_n1w1in2, c("red", "blue"))
drawGraph(value_rvnd_n2w1in3, value_dvnd_n1w1in3, c("red", "blue"))
drawGraph(value_rvnd_n2w1in4, value_dvnd_n1w1in4, c("red", "blue"))
drawGraph(value_rvnd_n2w1in5, value_dvnd_n1w1in5, c("red", "blue"))
drawGraph(value_rvnd_n2w1in6, value_dvnd_n1w1in6, c("red", "blue"))
drawGraph(value_rvnd_n2w1in7, value_dvnd_n1w1in7, c("red", "blue"))
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
drawGraph(value_dvnd_n2w1in0, value_rvnd_n1w1in0, c("blue", "red"))
drawGraph(value_dvnd_n2w1in1, value_rvnd_n1w1in1, c("blue", "red"))
drawGraph(value_dvnd_n2w1in2, value_rvnd_n1w1in2, c("blue", "red"))
drawGraph(value_dvnd_n2w1in3, value_rvnd_n1w1in3, c("blue", "red"))
drawGraph(value_dvnd_n2w1in4, value_rvnd_n1w1in4, c("blue", "red"))
drawGraph(value_dvnd_n2w1in5, value_rvnd_n1w1in5, c("blue", "red"))
drawGraph(value_dvnd_n2w1in6, value_rvnd_n1w1in6, c("blue", "red"))
drawGraph(value_dvnd_n2w1in7, value_rvnd_n1w1in7, c("blue", "red"))
drawGraph(value_rvnd_n1w1in0, value_dvnd_n2w1in0, c("red", "blue"))
drawGraph(value_rvnd_n1w1in1, value_dvnd_n2w1in1, c("red", "blue"))
drawGraph(value_rvnd_n1w1in2, value_dvnd_n2w1in2, c("red", "blue"))
drawGraph(value_rvnd_n1w1in3, value_dvnd_n2w1in3, c("red", "blue"))
drawGraph(value_rvnd_n1w1in4, value_dvnd_n2w1in4, c("red", "blue"))
drawGraph(value_rvnd_n1w1in5, value_dvnd_n2w1in5, c("red", "blue"))
drawGraph(value_rvnd_n1w1in6, value_dvnd_n2w1in6, c("red", "blue"))
drawGraph(value_rvnd_n1w1in7, value_dvnd_n2w1in7, c("red", "blue"))
for (i in 1:8) {
drawGraph(value_rvnd_n1w1[i], value_dvnd_n2w1[i], c("red", "blue"))
}
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
for (i in 1:8) {
drawGraph(value_rvnd_n1w1[i], value_dvnd_n2w1[i], c("red", "blue"))
}
for (i in 1:8) {
drawGraph(unlist(value_rvnd_n1w1[i]), unlist(value_dvnd_n2w1[i]), c("red", "blue"))
}
boxplot(c(time_rvnd_in7, time_dvnd_in7), names=c(plot_labels_n1, plot_labels), col=c(red_color[1:4], white_color), main="Time in7")
for (i in 1:8) {
drawGraph(unlist(value_rvnd_n1w1[i]), unlist(value_dvnd_n2w1[i]), c("red", "blue"))
}
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND n2w1", names=c("0", "1", "2", "3", "4", "5", "6", "7"))
abline(h = 1, col = "red")
value_dvnd_rvnd_n2w1=list(compareVectors(value_dvnd_n1w1in0, value_rvnd_n1w1in0), compareVectors(value_dvnd_n1w1in1, value_rvnd_n1w1in1), compareVectors(value_dvnd_n1w1in2, value_rvnd_n1w1in2), compareVectors(value_dvnd_n1w1in3, value_rvnd_n1w1in3), compareVectors(value_dvnd_n1w1in4, value_rvnd_n1w1in4), compareVectors(value_dvnd_n1w1in5, value_rvnd_n1w1in5), compareVectors(value_dvnd_n1w1in6, value_rvnd_n1w1in6), compareVectors(value_dvnd_n1w1in7, value_rvnd_n1w1in7))
boxplot(value_dvnd_rvnd_n2w1, main="Value DVND/RVND n2w1", names=c("0", "1", "2", "3", "4", "5", "6", "7"))
abline(h = 1, col = "red")
compareVectors <- function(vec1, vec2){
return(sort(sort(vec1) / sort(vec2)))
}
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND n2w1", names=c("0", "1", "2", "3", "4", "5", "6", "7"))
abline(h = 1, col = "red")
value_dvnd_rvnd_n2w1=list(compareVectors(value_dvnd_n1w1in0, value_rvnd_n1w1in0), compareVectors(value_dvnd_n1w1in1, value_rvnd_n1w1in1), compareVectors(value_dvnd_n1w1in2, value_rvnd_n1w1in2), compareVectors(value_dvnd_n1w1in3, value_rvnd_n1w1in3), compareVectors(value_dvnd_n1w1in4, value_rvnd_n1w1in4), compareVectors(value_dvnd_n1w1in5, value_rvnd_n1w1in5), compareVectors(value_dvnd_n1w1in6, value_rvnd_n1w1in6), compareVectors(value_dvnd_n1w1in7, value_rvnd_n1w1in7))
boxplot(value_dvnd_rvnd_n2w1, main="Value DVND/RVND n2w1", names=c("0", "1", "2", "3", "4", "5", "6", "7"))
abline(h = 1, col = "red")
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
hist(unlist(value_dvnd_rvnd_n2w1[1]))
hist(unlist(value_dvnd_rvnd_n2w1[1]), col="red")
hist(unlist(value_dvnd_rvnd_n2w1[1]), unlist(value_dvnd_rvnd_n2w1[1]))
hist(value_dvnd_rvnd_n2w1)
a = hist(unlist(value_dvnd_rvnd_n2w1[1]))
b = hist(unlist(value_dvnd_rvnd_n2w1[2]))
plot(a, col="red")
plot(b, col="blue")
plot(a, col=rgb(0,0,1,1/4), xlim=c(0,10))  # first histogram
plot(b, col=rgb(1,0,0,1/4), xlim=c(0,10), add=T)  # second
plot(a, col=rgb(0,0,1,1/4))  # first histogram
plot(b, col=rgb(1,0,0,1/4), add=T)  # second
hist1 = hist(unlist(value_dvnd_rvnd_n2w1[1]))
hist2 = hist(unlist(value_dvnd_rvnd_n2w1[2]))
hist3 = hist(unlist(value_dvnd_rvnd_n2w1[3]))
hist4 = hist(unlist(value_dvnd_rvnd_n2w1[4]))
hist5 = hist(unlist(value_dvnd_rvnd_n2w1[5]))
hist6 = hist(unlist(value_dvnd_rvnd_n2w1[6]))
hist7 = hist(unlist(value_dvnd_rvnd_n2w1[7]))
hist8 = hist(unlist(value_dvnd_rvnd_n2w1[8]))
plot(hist1, col=rainbow(8)[1])
plot(hist2, col=rainbow(8)[2], add=T)
plot(hist3, col=rainbow(8)[3], add=T)
plot(hist4, col=rainbow(8)[4], add=T)
plot(hist5, col=rainbow(8)[5], add=T)
plot(hist6, col=rainbow(8)[6], add=T)
plot(hist7, col=rainbow(8)[7], add=T)
plot(hist8, col=rainbow(8)[8], add=T)
plot(hist1, col=rainbow(8)[1])
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T), pch=16
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1])
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=alpha(rainbow(8)[1], 0.5))
plot(hist2, col=alpha(rainbow(8)[2], 0.5), add=T, pch=16)
plot(hist3, col=alpha(rainbow(8)[3], 0.5), add=T, pch=16)
plot(hist4, col=alpha(rainbow(8)[4], 0.5), add=T, pch=16)
plot(hist5, col=alpha(rainbow(8)[5], 0.5), add=T, pch=16)
plot(hist6, col=alpha(rainbow(8)[6], 0.5), add=T, pch=16)
plot(hist7, col=alpha(rainbow(8)[7], 0.5), add=T, pch=16)
plot(hist8, col=alpha(rainbow(8)[8], 0.5), add=T, pch=16)
plot(hist1, col=rainbow(8)[1])
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=(0, 2))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0, 2))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0.7, 1.2))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0.85, 1.1))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0.885, 1.05))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0.885, 1.15))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
plot(hist1, col=rainbow(8)[1], xlim=c(0.885, 1.09))
plot(hist2, col=rainbow(8)[2], add=T, pch=16)
plot(hist3, col=rainbow(8)[3], add=T, pch=16)
plot(hist4, col=rainbow(8)[4], add=T, pch=16)
plot(hist5, col=rainbow(8)[5], add=T, pch=16)
plot(hist6, col=rainbow(8)[6], add=T, pch=16)
plot(hist7, col=rainbow(8)[7], add=T, pch=16)
plot(hist8, col=rainbow(8)[8], add=T, pch=16)
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND n2w1", names=0:7, xlab="# Instance")
abline(h = 1, col = "red")
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND n2w1", names=0:7)
abline(h = 1, col = "red")
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND n2w1", names=0:7, xlab="# Instance")
abline(h = 1, col = "red")
boxplot(value_dvnd_rvnd_n2w1, main="Value DVND/RVND n2w1", names=0:7, xlab="# Instance")
abline(h = 1, col = "red")
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
boxplot(time_dvnd_rvnd_n2w1, main="", names=0:7, xlab="# Instance", ylab="Time DVND/RVND")
abline(h = 1, col = "red")
value_dvnd_rvnd_n2w1=list(compareVectors(value_dvnd_n1w1in0, value_rvnd_n1w1in0), compareVectors(value_dvnd_n1w1in1, value_rvnd_n1w1in1), compareVectors(value_dvnd_n1w1in2, value_rvnd_n1w1in2), compareVectors(value_dvnd_n1w1in3, value_rvnd_n1w1in3), compareVectors(value_dvnd_n1w1in4, value_rvnd_n1w1in4), compareVectors(value_dvnd_n1w1in5, value_rvnd_n1w1in5), compareVectors(value_dvnd_n1w1in6, value_rvnd_n1w1in6), compareVectors(value_dvnd_n1w1in7, value_rvnd_n1w1in7))
boxplot(value_dvnd_rvnd_n2w1, main="", names=0:7, xlab="# Instance", ylab="Value DVND/RVND")
abline(h = 1, col = "red")
boxplot(time_dvnd_rvnd_n2w1, main="Time DVND/RVND", names=0:7, xlab="# Instance", ylab="Time DVND/RVND")
abline(h = 1, col = "red")
value_dvnd_rvnd_n2w1=list(compareVectors(value_dvnd_n1w1in0, value_rvnd_n1w1in0), compareVectors(value_dvnd_n1w1in1, value_rvnd_n1w1in1), compareVectors(value_dvnd_n1w1in2, value_rvnd_n1w1in2), compareVectors(value_dvnd_n1w1in3, value_rvnd_n1w1in3), compareVectors(value_dvnd_n1w1in4, value_rvnd_n1w1in4), compareVectors(value_dvnd_n1w1in5, value_rvnd_n1w1in5), compareVectors(value_dvnd_n1w1in6, value_rvnd_n1w1in6), compareVectors(value_dvnd_n1w1in7, value_rvnd_n1w1in7))
boxplot(value_dvnd_rvnd_n2w1, main="Value DVND/RVND", names=0:7, xlab="# Instance", ylab="Value DVND/RVND")
abline(h = 1, col = "red")
for (i in 1:8) {
drawGraph(unlist(value_rvnd_n1w1[i]), unlist(value_dvnd_n2w1[i]), c("red", "blue"), "Sample", "Solution Value")
}
drawGraph <- function(seqvec1, seqvec2, colors, xlabel, ylabel){
if (missing(xlabel)) {
xlabel = ""
}
if (missing(ylabel)) {
ylabel = ""
}
plot(1:100, sort(seqvec1), type="o", col=colors[1], xlab = xlabel, ylab = ylabel, main = "", ylim=c(min(seqvec1, seqvec2), max(seqvec1, seqvec2)))
lines(1:100, sort(seqvec2), type = "o", col = colors[2])
legend("bottomright", inset=.02, c("RVND", "DVND"), fill=colors, horiz=TRUE, cex=0.8)
}
for (i in 1:8) {
drawGraph(unlist(value_rvnd_n1w1[i]), unlist(value_dvnd_n2w1[i]), c("red", "blue"), "Sample", "Solution Value")
}
for (i in 1:8) {
drawGraph(unlist(value_rvnd_n1w1[i]), unlist(value_dvnd_n2w1[i]), c("red", "blue"), "Sample", "Solution value")
}
legend("bottomright", inset=.02, c("RVND", "DVND"), fill=colors, horiz=TRUE, cex=0.8)
source('~/git/dvnd-df/doc/results/gpu01-04/dvnd-rvnd.r')
mean(time_rvnd_in0)
time_rvnd_in0
time_rvnd_in0[0]
unlist(time_rvnd_in0[0])
mean(time_rvnd_n1w1in0)
mean(time_rvnd_n1w2in0)
View(time_dvnd_in2)
exit
q()
source('~/git/dvnd-df/doc/results/gpu03-04/analise.r', echo=TRUE)
source('~/git/dvnd-df/doc/results/gpu03-04/analise.r', echo=TRUE)
testar = compNoIndMov[compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd',]
testarRvnd = compNoIndMov[compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd',]
wilcox.test(testar$time, testarRvnd$time)
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
wilcox.test(time ~ type, data=testarTudo)
linha = ""
linha
linha += "oi"
linha = linha + "oi"
linha = cat(linha, "oi")
linha = cat(linha, "1oi")
linha = cat(linha, "1oi")
source('~/git/dvnd-df/doc/results/gpu03-04/analise.r', echo=TRUE)
for (itnum in 0:7) {
for (mac in 1:4) {
linha = ""
for (work in 1:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", resp$p.value, if (resp$p.value < .05) "}" else "", if (work < 10) " & " else " \\\\")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = ""
for (work in 1:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", resp$p.value, if (resp$p.value < .05) "}" else "", if (work < 10) " & " else " \\\\")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 1:7) {
for (mac in 1:4) {
linha = paste(itnum, ";")
for (work in 1:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", resp$p.value, if (resp$p.value < .05) "}" else "", if (work < 10) " & " else " \\\\")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 1:7) {
for (mac in 1:4) {
linha = paste(itnum, ";")
for (work in 1:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work < 10) " & " else " \\\\")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 1:7) {
for (mac in 1:4) {
linha = paste(itnum, ";")
for (work in 1:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work < 10) " & " else " \\\\")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 1:7) {
for (mac in 1:4) {
linha = paste(itnum, ";")
for (work in 1:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work < 10) " & " else " \\\\")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, ";")
for (work in 1:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work < 10) " & " else " \\\\")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, "&", pad="")
for (work in 1:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work < 10) " & " else " \\\\", pad="")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, "&", sep="")
for (work in 1:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work < 10) " & " else " \\\\", sep="")
}
cat(sprintf("%s\n", linha))
}
}
format(.00000001, digits = 2)
format(.01000001, digits = 3)
format(.01000001, digits = 2)
format(.01000001, digits = 3)
format(.01123451, digits = 3)
format(.01123451, digits = 2)
format(.01123451, digits = 0)
format(.01123451, digits = 1)
format(.41123451, digits = 1)
format(.41123451, digits = 0)
format(.41123451, digits = 1)
format(.41123451, digits = 2)
format(.41123451, digits = 3)
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, "&", sep="")
for (work in 1:5) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work < 10) " & " else " \\\\", sep="")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, "&", mac, "&", sep="")
for (work in 1:5) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work == 5 || work == 10) " & " else " \\\\", sep="")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, "&", mac, "&", sep="")
for (work in 1:5) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work == 5 || work == 10) " \\\\" else " & ", sep="")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, "&", mac, "&", sep="")
for (work in 6:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work == 5 || work == 10) " \\\\" else " & ", sep="")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, " & ", mac, " & ", sep="")
for (work in 6:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value < .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work == 5 || work == 10) " \\\\" else " & ", sep="")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, " & ", mac, " & ", sep="")
for (work in 6:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value >= .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value < .05) "}" else "", if (work == 5 || work == 10) " \\\\" else " & ", sep="")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, " & ", mac, " & ", sep="")
for (work in 6:10) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value >= .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value >= .05) "}" else "", if (work == 5 || work == 10) " \\\\" else " & ", sep="")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, " & ", mac, " & ", sep="")
for (work in 1:5) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
resp = wilcox.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value >= .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value >= .05) "}" else "", if (work == 5 || work == 10) " \\\\" else " & ", sep="")
}
cat(sprintf("%s\n", linha))
}
}
for (itnum in 0:7) {
for (mac in 1:4) {
linha = paste(itnum, " & ", mac, " & ", sep="")
for (work in 1:5) {
testarTudo = compNoIndMov[(compNoIndMov$inum==itnum & compNoIndMov$type=='rvnd') | (compNoIndMov$inum==itnum & compNoIndMov$n==mac & compNoIndMov$w==work & compNoIndMov$type=='dvnd'),]
assertthat::are_equal(length(testarTudo[testarTudo$type=='rvnd',]$time), 100)
assertthat::are_equal(length(testarTudo[testarTudo$type=='dvnd',]$time), 100)
#resp = wilcox.test(time ~ type, data=testarTudo)
resp = kruskal.test(time ~ type, data=testarTudo)
linha = paste(linha, if (resp$p.value >= .05) "\\textbf{" else "", format(resp$p.value, digits=3), if (resp$p.value >= .05) "}" else "", if (work == 5 || work == 10) " \\\\" else " & ", sep="")
}
cat(sprintf("%s\n", linha))
}
}
